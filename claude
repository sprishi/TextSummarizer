import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from statsmodels.tsa.statespace.sarimax import SARIMAX
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error
import warnings
warnings.filterwarnings('ignore')

class TD3CForecaster:
    def __init__(self, freq='W'):
        """
        Initialize TD3C forecaster
        freq: 'W' for weekly or 'M' for monthly
        """
        self.freq = freq
        self.prophet_model = None
        self.arima_model = None
        
    def preprocess_data(self, df):
        """
        Preprocess the input data
        """
        # Convert date column to datetime
        df['Date'] = pd.to_datetime(df['Date'])
        
        # Create target variables for next period
        if self.freq == 'W':
            df['WS_Spot_next'] = df.groupby(df['Date'].dt.isocalendar().week)['WS_Spot'].shift(-1)
        else:  # Monthly
            df['WS_Spot_next'] = df.groupby(df['Date'].dt.to_period('M'))['WS_Spot'].shift(-1)
        
        # Resample data to weekly/monthly frequency
        df_resampled = df.resample(self.freq, on='Date').agg({
            'laden_perc': 'mean',
            'spread_perc_global': 'mean',
            'laden_speed': 'mean',
            'ballast_speed': 'mean',
            'brent_price': 'mean',
            'BDTI': 'mean',
            'WS_Spot': 'mean',
            'TD3C_TCE': 'mean',
            'OSX': 'mean',
            'OVX': 'mean',
            'USD_SAR': 'mean',
            'USD_CNY': 'mean',
            'MFO_Fuj': 'mean',
            'Exp_TD3C_KBD': 'mean',
            'Count_VLCC': 'sum',
            'WS_Spot_next': 'last'
        })
        
        # Drop incomplete periods
        df_resampled = df_resampled.dropna()
        
        # Create additional features
        df_resampled['WS_Spot_lag1'] = df_resampled['WS_Spot'].shift(1)
        df_resampled['WS_Spot_lag2'] = df_resampled['WS_Spot'].shift(2)
        df_resampled['brent_price_lag1'] = df_resampled['brent_price'].shift(1)
        
        # Create event dummy variables
        df_resampled['covid_period'] = ((df_resampled.index >= '2020-03-01') & 
                                      (df_resampled.index <= '2021-06-30')).astype(int)
        df_resampled['russia_war'] = (df_resampled.index >= '2022-02-24').astype(int)
        
        # Identify price outliers
        price_std = df_resampled['WS_Spot'].std()
        price_mean = df_resampled['WS_Spot'].mean()
        df_resampled['price_shock'] = ((df_resampled['WS_Spot'] > price_mean + 2.5 * price_std) | 
                                     (df_resampled['WS_Spot'] < price_mean - 2.5 * price_std)).astype(int)
        
        return df_resampled
    
    def check_feature_importance(self, df):
        """
        Check feature importance and multicollinearity
        """
        # Calculate correlation matrix
        corr_matrix = df.corr()
        
        # Identify highly correlated features (>0.8)
        high_corr = np.where(np.abs(corr_matrix) > 0.8)
        high_corr = [(corr_matrix.index[x], corr_matrix.columns[y], corr_matrix.iloc[x, y]) 
                     for x, y in zip(*high_corr) if x != y and x < y]
        
        return high_corr
    
    def train_prophet(self, df, train_size=0.8):
        """
        Train Prophet model with sliding window
        """
        # Prepare data for Prophet
        prophet_df = df.reset_index()
        prophet_df = prophet_df.rename(columns={'Date': 'ds', 'WS_Spot': 'y'})
        
        # Initialize lists to store results
        dates = []
        actuals = []
        predictions = []
        lower_bounds = []
        upper_bounds = []
        
        # Calculate split point
        split_idx = int(len(df) * train_size)
        
        # Sliding window prediction
        for i in range(split_idx, len(df)):
            # Train data up to current point
            train_df = prophet_df.iloc[:i]
            
            # Initialize and train Prophet model
            model = Prophet(interval_width=0.95)
            model.add_regressor('brent_price')
            model.add_regressor('laden_perc')
            model.add_regressor('Exp_TD3C_KBD')
            model.fit(train_df)
            
            # Make prediction for next point
            future = prophet_df.iloc[i:i+1][['ds', 'brent_price', 'laden_perc', 'Exp_TD3C_KBD']]
            forecast = model.predict(future)
            
            dates.append(prophet_df.iloc[i]['ds'])
            actuals.append(prophet_df.iloc[i]['y'])
            predictions.append(forecast['yhat'].values[0])
            lower_bounds.append(forecast['yhat_lower'].values[0])
            upper_bounds.append(forecast['yhat_upper'].values[0])
        
        self.prophet_model = model
        return pd.DataFrame({
            'Date': dates,
            'Actual': actuals,
            'Predicted': predictions,
            'Lower_Bound': lower_bounds,
            'Upper_Bound': upper_bounds,
            'Direction': np.where(np.array(predictions) > np.array(actuals).shift(1), 'Up', 'Down')
        })
    
    def train_arima(self, df, train_size=0.8):
        """
        Train Auto ARIMA model with sliding window
        """
        # Initialize lists to store results
        dates = []
        actuals = []
        predictions = []
        lower_bounds = []
        upper_bounds = []
        
        # Calculate split point
        split_idx = int(len(df) * train_size)
        
        # Sliding window prediction
        for i in range(split_idx, len(df)):
            # Train data up to current point
            train_data = df.iloc[:i]
            
            # Fit SARIMAX model
            model = SARIMAX(train_data['WS_Spot'],
                          exog=train_data[['brent_price', 'laden_perc', 'Exp_TD3C_KBD']],
                          order=(1, 1, 1),
                          seasonal_order=(1, 1, 1, 12))
            results = model.fit()
            
            # Make prediction for next point
            forecast = results.get_forecast(steps=1, 
                                         exog=df.iloc[i:i+1][['brent_price', 'laden_perc', 'Exp_TD3C_KBD']])
            
            dates.append(df.index[i])
            actuals.append(df.iloc[i]['WS_Spot'])
            predictions.append(forecast.predicted_mean[0])
            lower_bounds.append(forecast.conf_int().iloc[0, 0])
            upper_bounds.append(forecast.conf_int().iloc[0, 1])
        
        self.arima_model = results
        return pd.DataFrame({
            'Date': dates,
            'Actual': actuals,
            'Predicted': predictions,
            'Lower_Bound': lower_bounds,
            'Upper_Bound': upper_bounds,
            'Direction': np.where(np.array(predictions) > np.array(actuals).shift(1), 'Up', 'Down')
        })
    
    def scenario_analysis(self, df, model_type='prophet', kbd_scenarios=[500, 1000, 1500]):
        """
        Perform scenario analysis with different KBD values
        """
        last_date = df.index[-1]
        
        if self.freq == 'W':
            future_dates = [last_date + timedelta(weeks=1)]
        else:
            future_dates = [last_date + pd.offsets.MonthEnd(1)]
        
        scenario_results = []
        
        for kbd in kbd_scenarios:
            if model_type == 'prophet':
                future = pd.DataFrame({
                    'ds': future_dates,
                    'brent_price': [df['brent_price'].iloc[-1]],
                    'laden_perc': [df['laden_perc'].iloc[-1]],
                    'Exp_TD3C_KBD': [kbd]
                })
                forecast = self.prophet_model.predict(future)
                scenario_results.append({
                    'KBD_Scenario': kbd,
                    'Predicted_Price': forecast['yhat'].values[0],
                    'Lower_Bound': forecast['yhat_lower'].values[0],
                    'Upper_Bound': forecast['yhat_upper'].values[0]
                })
            else:  # ARIMA
                forecast = self.arima_model.get_forecast(
                    steps=1,
                    exog=[[df['brent_price'].iloc[-1], df['laden_perc'].iloc[-1], kbd]]
                )
                scenario_results.append({
                    'KBD_Scenario': kbd,
                    'Predicted_Price': forecast.predicted_mean[0],
                    'Lower_Bound': forecast.conf_int().iloc[0, 0],
                    'Upper_Bound': forecast.conf_int().iloc[0, 1]
                })
        
        return pd.DataFrame(scenario_results)

# Usage example
def main():
    # Load your data
    # df = pd.read_csv('your_data.csv')
    
    # Initialize forecasters
    weekly_forecaster = TD3CForecaster(freq='W')
    monthly_forecaster = TD3CForecaster(freq='M')
    
    # Preprocess data
    weekly_data = weekly_forecaster.preprocess_data(df)
    monthly_data = monthly_forecaster.preprocess_data(df)
    
    # Check feature importance
    weekly_correlations = weekly_forecaster.check_feature_importance(weekly_data)
    monthly_correlations = monthly_forecaster.check_feature_importance(monthly_data)
    
    # Train models and get predictions
    weekly_prophet_results = weekly_forecaster.train_prophet(weekly_data)
    weekly_arima_results = weekly_forecaster.train_arima(weekly_data)
    
    monthly_prophet_results = monthly_forecaster.train_prophet(monthly_data)
    monthly_arima_results = monthly_forecaster.train_arima(monthly_data)
    
    # Perform scenario analysis
    weekly_prophet_scenarios = weekly_forecaster.scenario_analysis(
        weekly_data, 'prophet', [500, 1000, 1500]
    )
    monthly_prophet_scenarios = monthly_forecaster.scenario_analysis(
        monthly_data, 'prophet', [500, 1000, 1500]
    )
    
    return (weekly_prophet_results, weekly_arima_results,
            monthly_prophet_results, monthly_arima_results,
            weekly_prophet_scenarios, monthly_prophet_scenarios)

if __name__ == "__main__":
    main()
