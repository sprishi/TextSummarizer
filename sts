# List of port coordinates (latitude, longitude)
ports = [(25.0, 55.0), (24.5, 54.5)]  # Example port coordinates

# Define a function to check if a ship is near any port
def is_near_port(lat, lon, ports, max_distance=1000):
    for port in ports:
        if calculate_distance(lat, lon, port[0], port[1]) < max_distance:
            return True
    return False

# Identify potential STS operations
sts_operations = []

# Create a dictionary to store data for quick lookup
data_dict = {mmsi: group for mmsi, group in grouped}

for ship1, data1 in data_dict.items():
    for ship2, data2 in data_dict.items():
        if ship1 >= ship2:  # Avoid duplicate checks and self-comparison
            continue

        data1 = data1.sort_values(by='timestamp')
        data2 = data2.sort_values(by 'timestamp')
        consecutive_nearby_time = timedelta(0)
        total_nearby_time = timedelta(0)
        last_nearby_time = None
        start_draught_ship1 = None
        end_draught_ship1 = None
        start_draught_ship2 = None
        end_draught_ship2 = None

        # Iterate over data1 and use vectorized operations for data2 within the 5-minute window
        for _, row1 in data1.iterrows():
            time_window = (row1['timestamp'] - timedelta(minutes=5), row1['timestamp'] + timedelta(minutes=5))
            window_data2 = data2[(data2['timestamp'] >= time_window[0]) & (data2['timestamp'] <= time_window[1])]

            if not window_data2.empty:
                distances = window_data2.apply(lambda row: calculate_distance(row1['latitude'], row1['longitude'], row['latitude'], row['longitude']), axis=1)
                close_ships = window_data2[(distances < 500) & (abs(window_data2['speed'] - row1['speed']) < 1) & (abs(window_data2['heading'] - row1['heading']) < 10) & (window_data2['speed'] < 6)]

                if not close_ships.empty and not is_near_port(row1['latitude'], row1['longitude'], ports) and not is_near_port(close_ships.iloc[0]['latitude'], close_ships.iloc[0]['longitude'], ports):
                    if last_nearby_time:
                        consecutive_nearby_time = row1['timestamp'] - last_nearby_time
                    last_nearby_time = row1['timestamp']
                    total_nearby_time += consecutive_nearby_time
                    if start_draught_ship1 is None:
                        start_draught_ship1 = row1['draught']
                    end_draught_ship1 = row1['draught']
                    if start_draught_ship2 is None:
                        start_draught_ship2 = close_ships.iloc[0]['draught']
                    end_draught_ship2 = close_ships.iloc[0]['draught']
                else:
                    consecutive_nearby_time = timedelta(0)
                    last_nearby_time = None

        if total_nearby_time > timedelta(0):
            # Calculate draught percentage change
            draught_change_ship1 = ((end_draught_ship1 - start_draught_ship1) / start_draught_ship1 * 100) if start_draught_ship1 else None
            draught_change_ship2 = ((end_draught_ship2 - start_draught_ship2) / start_draught_ship2 * 100) if start_draught_ship2 else None
            sts_operations.append({
                'ship1': ship1,
                'ship2': ship2,
                'total_nearby_time': total_nearby_time,
                'last_nearby_time': last_nearby_time,
                'current_status': 'performing STS' if last_nearby_time and last_nearby_time >= now - timedelta(hours=1) else 'not performing STS',
                'draught_change_ship1 (%)': draught_change_ship1,
                'draught_change_ship2 (%)': draught_change_ship2
            })

# Convert STS operations to a DataFrame for better readability
sts_df = pd.DataFrame(sts_operations)
print(sts_df)
