import pandas as pd
from darts import TimeSeries
from darts.models import StatsForecastAutoETS, StatsForecastAutoARIMA, VARIMA
from darts.metrics import mape, rmse

# Assuming your DataFrame is named 'df'
# Convert DataFrame to Darts TimeSeries
series = TimeSeries.from_dataframe(df)

# Split the data
train, test = series.split_before(pd.Timestamp('2023-07-01'))

# Initialize models
models = [
    StatsForecastAutoETS(),
    StatsForecastAutoARIMA(),
    VARIMA()
]

# Train models and make predictions
predictions = {}
for model in models:
    model.fit(train)
    pred = model.predict(len(test))
    predictions[type(model).__name__] = pred

# Calculate accuracies
accuracies = {}
for model_name, pred in predictions.items():
    accuracies[model_name] = {
        'MAPE': mape(test, pred),
        'RMSE': rmse(test, pred)
    }

# Print accuracies
for model_name, metrics in accuracies.items():
    print(f"{model_name}:")
    for metric, values in metrics.items():
        print(f"  {metric}:")
        for column, value in zip(df.columns, values):
            print(f"    {column}: {value:.4f}")
    print()

# Select the best model (you can modify this based on your preference)
best_model = min(accuracies, key=lambda x: sum(accuracies[x]['MAPE']))

print(f"Best model based on average MAPE: {best_model}")

# Re-train on the whole dataset and forecast next 3 months with the best model
best_model_instance = next(model for model in models if type(model).__name__ == best_model)
best_model_instance.fit(series)
forecast = best_model_instance.predict(3)

print("Forecast for the next 3 months:")
print(forecast)



2 ===============================


from sklearn.preprocessing import StandardScaler
from darts import TimeSeries

# Initialize scalers for each column
scalers = {
    'Aframax': StandardScaler(),
    'Suezmax': StandardScaler(),
    'VLCC': StandardScaler()
}

# Function to scale and convert to TimeSeries
def scale_and_convert(train_series, test_series, scaler):
    scaled_train = scaler.fit_transform(train_series.values().reshape(-1, 1))
    scaled_test = scaler.transform(test_series.values().reshape(-1, 1))
    scaled_train_series = TimeSeries.from_times_and_values(train_series.time_index, scaled_train)
    scaled_test_series = TimeSeries.from_times_and_values(test_series.time_index, scaled_test)
    return scaled_train_series, scaled_test_series

# Load your data into a pandas DataFrame
data = pd.read_csv('your_data.csv', index_col='date', parse_dates=True)

# Convert to Darts TimeSeries
aframax_series = TimeSeries.from_dataframe(data[['Aframax']])
suezmax_series = TimeSeries.from_dataframe(data[['Suezmax']])
vlcc_series = TimeSeries.from_dataframe(data[['VLCC']])

# Split into training and testing sets
train_aframax, test_aframax = aframax_series.split_before(30)
train_suezmax, test_suezmax = suezmax_series.split_before(30)
train_vlcc, test_vlcc = vlcc_series.split_before(30)

# Apply scaling and conversion
scaled_train_aframax, scaled_test_aframax = scale_and_convert(train_aframax, test_aframax, scalers['Aframax'])
scaled_train_suezmax, scaled_test_suezmax = scale_and_convert(train_suezmax, test_suezmax, scalers['Suezmax'])
scaled_train_vlcc, scaled_test_vlcc = scale_and_convert(train_vlcc, test_vlcc, scalers['VLCC'])

# Now you can fit the models on scaled data and make predictions

# Fit ETS models on scaled data
ets_model_aframax.fit(scaled_train_aframax)
ets_model_suezmax.fit(scaled_train_suezmax)
ets_model_vlcc.fit(scaled_train_vlcc)

# Predict ETS models on scaled test data
scaled_ets_pred_aframax = ets_model_aframax.predict(len(scaled_test_aframax))
scaled_ets_pred_suezmax = ets_model_suezmax.predict(len(scaled_test_suezmax))
scaled_ets_pred_vlcc = ets_model_vlcc.predict(len(scaled_test_vlcc))

# Inverse transform the predictions
ets_pred_aframax = scalers['Aframax'].inverse_transform(scaled_ets_pred_aframax.values())
ets_pred_suezmax = scalers['Suezmax'].inverse_transform(scaled_ets_pred_suezmax.values())
ets_pred_vlcc = scalers['VLCC'].inverse_transform(scaled_ets_pred_vlcc.values())

# Fit ARIMA models on scaled data
arima_model_aframax.fit(scaled_train_aframax)
arima_model_suezmax.fit(scaled_train_suezmax)
arima_model_vlcc.fit(scaled_train_vlcc)

# Predict ARIMA models on scaled test data
scaled_arima_pred_aframax = arima_model_aframax.predict(len(scaled_test_aframax))
scaled_arima_pred_suezmax = arima_model_suezmax.predict(len(scaled_test_suezmax))
scaled_arima_pred_vlcc = arima_model_vlcc.predict(len(scaled_test_vlcc))

# Inverse transform the predictions
arima_pred_aframax = scalers['Aframax'].inverse_transform(scaled_arima_pred_aframax.values())
arima_pred_suezmax = scalers['Suezmax'].inverse_transform(scaled_arima_pred_suezmax.values())
arima_pred_vlcc = scalers['VLCC'].inverse_transform(scaled_arima_pred_vlcc.values())

from darts.metrics import rmse, mape

# Calculate accuracy metrics for ETS
ets_rmse_aframax = rmse(test_aframax.values(), ets_pred_aframax)
ets_rmse_suezmax = rmse(test_suezmax.values(), ets_pred_suezmax)
ets_rmse_vlcc = rmse(test_vlcc.values(), ets_pred_vlcc)

ets_mape_aframax = mape(test_aframax.values(), ets_pred_aframax)
ets_mape_suezmax = mape(test_suezmax.values(), ets_pred_suezmax)
ets_mape_vlcc = mape(test_vlcc.values(), ets_pred_vlcc)

# Calculate accuracy metrics for ARIMA
arima_rmse_aframax = rmse(test_aframax.values(), arima_pred_aframax)
arima_rmse_suezmax = rmse(test_suezmax.values(), arima_pred_suezmax)
arima_rmse_vlcc = rmse(test_vlcc.values(), arima_pred_vlcc)

arima_mape_aframax = mape(test_aframax.values(), arima_pred_aframax)
arima_mape_suezmax = mape(test_suezmax.values(), arima_pred_suezmax)
arima_mape_vlcc = mape(test_vlcc.values(), arima_pred_vlcc)

# Print metrics for ETS
print("ETS Aframax RMSE:", ets_rmse_aframax, "ETS Aframax MAPE:", ets_mape_aframax)
print("ETS Suezmax RMSE:", ets_rmse_suezmax, "ETS Suezmax MAPE:", ets_mape_suezmax)
print("ETS VLCC RMSE:", ets_rmse_vlcc, "ETS VLCC MAPE:", ets_mape_vlcc)

# Print metrics for ARIMA
print("ARIMA Aframax RMSE:", arima_rmse_aframax, "ARIMA Aframax MAPE:", arima_mape_aframax)
print("ARIMA Suezmax RMSE:", arima_rmse_suezmax, "ARIMA Suezmax MAPE:", arima_mape_suezmax)
print("ARIMA VLCC RMSE:", arima_rmse_vlcc, "ARIMA VLCC MAPE:", arima_mape_vlcc)

# Combine the series into a single multivariate TimeSeries
combined_series = TimeSeries.from_dataframe(data)

# Split combined series into training and testing sets (30/12)
train_combined, test_combined = combined_series.split_before(30)

# Initialize and fit VARIMA model
varima_model = VARIMA()
varima_model.fit(train_combined)

# Predict VARIMA model
varima_pred = varima_model.predict(len(test_combined))

# Split the predictions back to individual series
varima_pred_aframax = varima_pred['Aframax']
varima_pred_suezmax = varima_pred['Suezmax']
varima_pred_vlcc = varima_pred['VLCC']

# Calculate accuracy metrics for VARIMA
varima_rmse_aframax = rmse(test_combined['Aframax'], varima_pred_aframax)
varima_rmse_suezmax = rmse(test_combined['Suezmax'], varima_pred_suezmax)
varima_rmse_vlcc = rmse(test_combined['VLCC'], varima_pred_vlcc)

varima_mape_aframax = mape(test_combined['Aframax'], varima_pred_aframax)
varima_mape_suezmax = mape(test_combined['Suezmax'], varima_pred_suezmax)
varima_mape_vlcc = mape(test_combined['VLCC'], varima_pred_vlcc)

# Print metrics for VARIMA
print("VARIMA Aframax RMSE:", varima_rmse_aframax, "VARIMA Aframax MAPE:", varima_mape_aframax)
print("VARIMA Suezmax RMSE:", varima_rmse_suezmax, "VARIMA Suezmax MAPE:", varima_mape_suezmax)
print("VARIMA VLCC RMSE:", varima_rmse_vlcc, "VARIMA VLCC MAPE:", varima_mape_vlcc)


