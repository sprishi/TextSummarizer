import networkx as nx

def group_overlapping_journeys(mo_whole: pd.DataFrame) -> pd.DataFrame:
    """
    Groups overlapping journeys for each vessel (IMO).

    This function identifies all journeys that overlap in time for each IMO
    and assigns a unique 'journey_group' identifier to each cluster of
    overlapping journeys.

    Args:
        mo_whole: DataFrame with vessel flow data, including 'imo',
                  'departuredate', and 'arrivaldate'.

    Returns:
        A new DataFrame with an added 'journey_group' column.
    """
    # Ensure date columns are in datetime format and create a copy
    df = mo_whole.copy()
    df['departuredate'] = pd.to_datetime(df['departuredate'])
    df['arrivaldate'] = pd.to_datetime(df['arrivaldate'])

    # Sort for clarity, although not strictly necessary for this logic
    df = df.sort_values(['imo', 'departuredate']).reset_index(drop=True)

    # Initialize the new column
    df['journey_group'] = None

    # Process each vessel's journeys
    for imo, group in df.groupby('imo'):
        if len(group) < 2:
            # If only one journey, it gets its own unique group
            df.loc[group.index, 'journey_group'] = f"{imo}_1"
            continue

        # Create a graph where each journey is a node
        G = nx.Graph()
        indices = group.index.tolist()
        G.add_nodes_from(indices)

        # Add an edge between journeys if their date ranges overlap
        for i in range(len(indices)):
            for j in range(i + 1, len(indices)):
                idx1 = indices[i]
                idx2 = indices[j]

                # Condition for two date ranges to overlap
                # (StartA <= EndB) and (EndA >= StartB)
                is_overlapping = (df.loc[idx1, 'departuredate'] <= df.loc[idx2, 'arrivaldate'] and
                                  df.loc[idx1, 'arrivaldate'] >= df.loc[idx2, 'departuredate'])

                if is_overlapping:
                    G.add_edge(idx1, idx2)

        # Find all connected groups of journeys (the connected components)
        journey_clusters = nx.connected_components(G)

        # Assign a unique group ID to each cluster
        for i, cluster in enumerate(journey_clusters, 1):
            group_id = f"{imo}_{i}"
            # `cluster` is a set of DataFrame indices for this group
            df.loc[list(cluster), 'journey_group'] = group_id

    return df
