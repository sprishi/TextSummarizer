def classify_partial_journeys(df):
    df = df.copy()
    df['departuredate'] = pd.to_datetime(df['departuredate'])
    df['arrivaldate'] = pd.to_datetime(df['arrivaldate'])

    df['partial_journey'] = 'no'
    df['partial'] = 'no'

    results = []

    for imo, group in df.groupby('imo'):
        g = group.sort_values(by=['departuredate', 'arrivaldate']).reset_index()
        g['tag'] = 'no'

        # Check for overlapping discharge (same dep, different arr)
        for dep in g['departuredate'].unique():
            same_dep = g[g['departuredate'] == dep]
            if len(same_dep['arrivaldate'].unique()) > 1:
                g.loc[same_dep.index, 'tag'] = 'discharge'

        # Check for overlapping load (same arr, different dep)
        for arr in g['arrivaldate'].unique():
            same_arr = g[g['arrivaldate'] == arr]
            if len(same_arr['departuredate'].unique()) > 1:
                g.loc[same_arr.index, 'tag'] = 'load'

        # Now find overlaps of both load and discharge
        overlaps = []
        for i in range(len(g)):
            row = g.loc[i]
            others = g[(g.index != i)]
            cond = (
                (others['departuredate'] <= row['arrivaldate']) &
                (others['arrivaldate'] >= row['departuredate'])
            )
            if (others[cond]['tag'].nunique() > 1):
                overlaps.append(i)

        g.loc[overlaps, 'tag'] = 'both'
        g['partial_journey'] = g['tag']
        g.drop(columns='tag', inplace=True)

        # Assign 'partial' flag
        for val in ['load', 'discharge', 'both']:
            rows = g[g['partial_journey'] == val]
            if not rows.empty:
                g.loc[rows.index[0], 'partial'] = 'yes'
                g.loc[rows.index[1:], 'partial'] = 'dup'

        results.append(g.set_index('index'))

    final_df = pd.concat(results).sort_index()
    return final_df
